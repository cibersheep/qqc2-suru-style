import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtQuick.Controls.Suru 2.2'

Module {
    dependencies: []
    Component { name: "QQuickAttachedObject"; prototype: "QObject" }
    Component {
        name: "QQuickSuruAnimations"
        prototype: "QObject"
        Property { name: "SnapDuration"; type: "int"; isReadonly: true }
        Property { name: "FastDuration"; type: "int"; isReadonly: true }
        Property { name: "BriskDuration"; type: "int"; isReadonly: true }
        Property { name: "SlowDuration"; type: "int"; isReadonly: true }
        Property { name: "SleepyDuration"; type: "int"; isReadonly: true }
        Property { name: "EasingIn"; type: "QEasingCurve"; isReadonly: true }
        Property { name: "EasingOut"; type: "QEasingCurve"; isReadonly: true }
        Property { name: "EasingInOut"; type: "QEasingCurve"; isReadonly: true }
        Property { name: "EasingOutIn"; type: "QEasingCurve"; isReadonly: true }
    }
    Component {
        name: "QQuickSuruStyle"
        prototype: "QQuickAttachedObject"
        exports: ["QtQuick.Controls.Suru/Suru 2.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Theme"
            values: {
                "Light": 0,
                "Dark": 1,
                "System": 2
            }
        }
        Enum {
            name: "HighlightType"
            values: {
                "PositiveHighlight": 0,
                "NegativeHighlight": 1,
                "WarningHighlight": 2,
                "InformationHighlight": 3
            }
        }
        Enum {
            name: "Color"
            values: {
                "Black": 0,
                "Jet": 1,
                "Inkstone": 2,
                "Graphite": 3,
                "Ash": 4,
                "Silk": 5,
                "Porcelain": 6,
                "White": 7,
                "Blue": 8,
                "Green": 9,
                "Red": 10,
                "Yellow": 11,
                "Orange": 12,
                "Purple": 13,
                "LightBlue": 14,
                "LightGreen": 15,
                "LightYellow": 16,
                "LightRed": 17
            }
        }
        Enum {
            name: "PaletteColor"
            values: {
                "Positive": 0,
                "Negative": 1,
                "Warning": 2,
                "Information": 3,
                "High": 4,
                "MidHigh": 5,
                "Mid": 6,
                "MidLow": 7,
                "Low": 8
            }
        }
        Enum {
            name: "TextLevel"
            values: {
                "HeadingOne": 0,
                "HeadingTwo": 1,
                "HeadingThree": 2,
                "Paragraph": 3,
                "Small": 4,
                "Caption": 5,
                "CodeBlock": 6
            }
        }
        Enum {
            name: "TextStyle"
            values: {
                "PrimaryText": 0,
                "SecondaryText": 1,
                "TertiaryText": 2
            }
        }
        Property { name: "theme"; type: "Theme" }
        Property { name: "lightPositive"; type: "QVariant" }
        Property { name: "lightNegative"; type: "QVariant" }
        Property { name: "lightWarning"; type: "QVariant" }
        Property { name: "lightInformation"; type: "QVariant" }
        Property { name: "lightHigh"; type: "QVariant" }
        Property { name: "lightMidHigh"; type: "QVariant" }
        Property { name: "lightMid"; type: "QVariant" }
        Property { name: "lightMidLow"; type: "QVariant" }
        Property { name: "lightLow"; type: "QVariant" }
        Property { name: "darkPositive"; type: "QVariant" }
        Property { name: "darkNegative"; type: "QVariant" }
        Property { name: "darkWarning"; type: "QVariant" }
        Property { name: "darkInformation"; type: "QVariant" }
        Property { name: "darkHigh"; type: "QVariant" }
        Property { name: "darkMidHigh"; type: "QVariant" }
        Property { name: "darkMid"; type: "QVariant" }
        Property { name: "darkMidLow"; type: "QVariant" }
        Property { name: "darkLow"; type: "QVariant" }
        Property { name: "highlightType"; type: "HighlightType" }
        Property { name: "textLevel"; type: "TextLevel" }
        Property { name: "textStyle"; type: "TextStyle" }
        Property { name: "highlightColor"; type: "QColor"; isReadonly: true }
        Property { name: "activeFocusColor"; type: "QColor"; isReadonly: true }
        Property { name: "overlayColor"; type: "QColor"; isReadonly: true }
        Property { name: "foregroundColor"; type: "QColor"; isReadonly: true }
        Property { name: "neutralColor"; type: "QColor"; isReadonly: true }
        Property { name: "secondaryBackgroundColor"; type: "QColor"; isReadonly: true }
        Property { name: "backgroundColor"; type: "QColor"; isReadonly: true }
        Property { name: "animations"; type: "QQuickSuruAnimations"; isReadonly: true; isPointer: true }
        Property { name: "units"; type: "QQuickSuruUnits"; isReadonly: true; isPointer: true }
        Signal { name: "paletteChanged" }
        Method {
            name: "color"
            type: "QColor"
            Parameter { name: "color"; type: "Color" }
            Parameter { name: "opacity"; type: "double" }
        }
        Method {
            name: "color"
            type: "QColor"
            Parameter { name: "color"; type: "Color" }
        }
    }
    Component {
        name: "QQuickSuruUnits"
        prototype: "QObject"
        Property { name: "breakpointXSmall"; type: "int"; isReadonly: true }
        Property { name: "breakpointSmall"; type: "int"; isReadonly: true }
        Property { name: "breakpointMedium"; type: "int"; isReadonly: true }
        Property { name: "breakpointLarge"; type: "int"; isReadonly: true }
        Property { name: "fontHeadingOne"; type: "QFont"; isReadonly: true }
        Property { name: "fontHeadingTwo"; type: "QFont"; isReadonly: true }
        Property { name: "fontHeadingThree"; type: "QFont"; isReadonly: true }
        Property { name: "fontParagraph"; type: "QFont"; isReadonly: true }
        Property { name: "fontSmall"; type: "QFont"; isReadonly: true }
        Property { name: "fontCaption"; type: "QFont"; isReadonly: true }
        Property { name: "fontCodeBlock"; type: "QFont"; isReadonly: true }
        Signal { name: "fontsChanged" }
        Method {
            name: "gu"
            type: "int"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "dp"
            type: "int"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "rem"
            type: "int"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "applyLabelTopPadding"
            type: "int"
            Parameter { name: "previousBlockLevel"; type: "int" }
        }
    }
}
